/*0. Выбрать id_преподавателя, фамилию, имя, отчество преподавателя, которой получает максимальный оклад на своем факультете.*/
SELECT T.ID_teacher,T.Surname,T.Name,T.Patronymic
FROM Teacher T JOIN Teacher_Position LP
	 ON T.ID_teacher = LP.ID_teacher 
	 JOIN Position P
	 ON P.ID_Position = LP.ID_Position
WHERE P.Salary = (SELECT MAX(P.Salary)
				  FROM Teacher T1 JOIN Teacher_Position LP
	                ON T1.ID_teacher = LP.ID_teacher 
	                JOIN Position P
	                ON P.ID_Position = LP.ID_Position
				  WHERE T.ID_Faculty=T1.ID_faculty);

--1. Выбрать данные о самом молодом и самом старшем студентах в каждой группе.
SELECT S.*
FROM  Students S
WHERE birthday = (SELECT MAX(birthday)
                  FROM Students)
	  OR
	  birthday = (SELECT MIN(birthday)
	              FROM Students);

--2. Выбрать данные о студентах, средний бал которых больше, чем средий бал группы.
SELECT S1.*
FROM Students S1 JOIN Progress P
     ON S1.ID_Student = P.ID_Student
GROUP BY S.ID_Student, S.Surname, S.Name, S.Patronymic, S.Birthday
HAVING AVG(AP1.Grade) > (SELECT AVG(P2.Grade)
                        FROM Students S2 JOIN Progress P2 
						     ON S2.ID_Student = P2.ID_Student
                        WHERE S1.Course = S2.Course AND S1.Group = S2.Group);

--16. Выбрать фамилии студентов, которые получают стипендию больше, чем средняя стипендия на их факультете.
SELECT S.Surname
FROM Students S
WHERE S.Salary>(SELECT AVG(S1.Salary)
                FROM Students S1
				WHERE S.ID_faculty=S1.ID_faculty);

--18. Выбрать курсы и группы без повторений тех факультетов, на которых преподается дисциплина «Базы данных».
 SELECT DISTINCT S1.Course, S1.Group
FROM Students S1 JOIN AcademicPerformanc AP1 ON S1.ID_Student = AP1.ID_Student
JOIN Disciplines D1 ON AP1.ID_Discipline = D1.ID_Discipline
WHERE TRIM(D1.Name) LIKE 'Базы данных'
GROUP BY S1.Course, S1.Group;

--19. Выбрать по каждой должности ФИО преподавателя, который принят на работу в эту должность последними.

SELECT P1.Name, T1.Surname, T1.Name, T1.Patronymic
FROM Teachers T1 JOIN TecherInPosition TINP1 ON T1.ID_Teacher = TINP1.ID_Teacher
JOIN Positions P1 ON TINP1.ID_Position = P1.ID_Position
WHERE TINP1.DateIn = (SELECT MAX(TINP2.DateIn)
FROM TecherInPosition TINP2 JOIN Positions P2 ON TINP2.ID_Position = P2.ID_Position
WHERE TINP1.ID_Teacher = TINP2.ID_Teacher); 

--22. Выбрать название факультета, ФИО декана, количество человек, работающих на факультете и общее количество человек, работающих в ВУЗе.

SELECT F1.Name, T1.Surname, T1.Name, T1.Patronymic, (SELECT COUNT(T2.ID_Teacer)
FROM Teachers T2 JOIN Faculties F2 ON T2.ID_Teacher = F2.ID_Teacher
WHERE F1.ID_Faculty = F2.ID_Faculty) 'CountF',
(SELECT COUNT(T2.ID_Teacer)
FROM Teachers T2) 'CountU'
FROM Teachers T1 JOIN Faculties F1 ON T1.ID_Teacher = F1.ID_Teacher;

--29. Выбрать названия дисциплин, которые на 5 сдали 2/3 от всех сдававших.

SELECT D1.Name
FROM Students S1 JOIN AcademicPerformanc AP1 ON S1.ID_Student = AP1.ID_Student
JOIN Disciplines D1 ON AP1.ID_Discipline = D1.ID_Discipline
GROUP BY D1.Name
HAVING COUNT(*) > (2 / 3) * (SELECT COUNT(S2.ID_Student)
FROM Students S2 JOIN AcademicPerformanc AP2 ON S2.ID_Student = AP2.ID_Student
JOIN Disciplines D2 ON AP2.ID_Discipline = D2.ID_Discipline
WHERE AP2.Grade = 5);

--001. Выбрать названия дисциплин, для которых количество студентов, сдавших дисциплину на 5 и 4, превышает количество студентов, 
--сдавших эту дисциплину на 3 и 2.*/

SELECT D1.Name
FROM Students S1 JOIN AcademicPerformanc AP1 ON S1.ID_Student = AP1.ID_Student
JOIN Disciplines D1 ON AP1.ID_Discipline = D1.ID_Discipline
WHERE (SELECT COUNT(S2.ID_Student)
FROM Students S2 JOIN AcademicPerformanc AP2 ON S2.ID_Student = AP2.ID_Student
JOIN Disciplines D2 ON AP2.ID_Discipline = D2.ID_Discipline
WHERE AP2.Grade = 5 OR AP2.Grade = 4)
>
(SELECT COUNT(S2.ID_Student)
FROM Students S2 JOIN AcademicPerformanc AP2 ON S2.ID_Student = AP2.ID_Student
JOIN Disciplines D2 ON AP2.ID_Discipline = D2.ID_Discipline
WHERE AP2.Grade = 3 OR AP2.Grade = 2);